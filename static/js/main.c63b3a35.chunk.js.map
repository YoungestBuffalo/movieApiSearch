{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","moviedetails","moviedata","results","Axios","get","then","response","console","log","data","setState","forEach","element","id","moviedetails2","toConsumableArray","push","clickSearch","bind","assertThisInitialized","movie","find","row","react_default","a","createElement","tagline","release_date","runtime","budget","status","_this2","searchInput","_this3","className","class","href","type","placeholder","name","onChange","event","target","value","onClick","map","style","backgroundImage","backdrop_path","title","vote_average","src","poster_path","getMovieDetails","overview","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c63b3a35.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Axios from 'axios';\r\n\r\nclass App extends Component {\r\n  constructor(props)\r\n  {\r\n    super(props)\r\n\r\n    this.state = {\r\n      moviedetails:[],\r\n      moviedata: {\r\n        results: []\r\n      }\r\n    }\r\n\r\n    Axios\r\n    //.get(\"https://api.themoviedb.org/3/movie/\" + this.state.moviedata.results.id + \"?api_key=1c5e5c8716eb21608eb5122dfa2d8290&language=en-US\")\r\n    .get(\"https://api.themoviedb.org/3/discover/movie?api_key=1c5e5c8716eb21608eb5122dfa2d8290&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1\")\r\n    .then((response) => {\r\n      console.log(response.data)\r\n      this.setState({moviedata: response.data});\r\n      response.data.results.forEach(element => {\r\n        Axios\r\n        .get(\"https://api.themoviedb.org/3/movie/\" + element.id + \"?api_key=1c5e5c8716eb21608eb5122dfa2d8290&language=en-US\")\r\n        .then((response) => {\r\n          var moviedetails2 = [...this.state.moviedetails]\r\n          moviedetails2.push(response.data)\r\n          this.setState({moviedetails: moviedetails2})\r\n        })\r\n      });\r\n    })\r\n    this.clickSearch=this.clickSearch.bind(this)\r\n  }\r\n  getMovieDetails(id){\r\n//loop through moviedets array, find movie with same id\r\nvar movie = this.state.moviedetails.find((row) => {return row.id === id})\r\n//var search = this.moviedata.title;\r\n\r\n//when found, return movie details in divs\r\nif(movie){\r\nreturn <div>\r\n  <div>{movie.tagline}</div>\r\n  <div>{movie.release_date}</div>\r\n  <div>Runtime:{\" \" + movie.runtime + \" \"}minutes</div>\r\n  <div>Budget:{\" \" + \"$\" + movie.budget}</div>\r\n  <div>Status:{\" \" + movie.status}</div>\r\n  </div>\r\n\r\n}\r\nelse \r\n{\r\n  return <div></div>\r\n}\r\n\r\n  }\r\nclickSearch() {\r\n  Axios\r\n  .get(\"https://api.themoviedb.org/3/search/movie?api_key=1c5e5c8716eb21608eb5122dfa2d8290&language=en-US&query=\"+ this.state.searchInput +\"&page=1&include_adult=false\")\r\n  .then((response) => {\r\n    \r\n   \r\n    this.setState({moviedata: response.data});\r\n      response.data.results.forEach(element => {\r\n    Axios\r\n    .get(\"https://api.themoviedb.org/3/movie/\" + element.id + \"?api_key=1c5e5c8716eb21608eb5122dfa2d8290&language=en-US\")\r\n    .then((response) => {\r\n      var moviedetails2 = [...this.state.moviedetails]\r\n      moviedetails2.push(response.data)\r\n      this.setState({moviedetails: moviedetails2})\r\n    })\r\n  });\r\n})\r\n}\r\n  render() {\r\n    return (\r\n      \r\n      <div className=\"App\">\r\n     <div class=\"topnav\">\r\n        <a class=\"active\" href=\"#home\">Home</a>\r\n        <a href=\"#about\">About</a>\r\n        <a href=\"#contact\">Contact</a>\r\n          <div class=\"search-container\">\r\n\r\n          \r\n            <div>\r\n              <input type=\"text\" placeholder=\"Search movies..\" name=\"search\" onChange={(event)=>{this.setState({searchInput: event.target.value})}} value={this.state.searchInput} ></input>\r\n              \r\n              <button type=\"submit\" onClick={this.clickSearch}><i class=\"fa fa-search\"></i></button>\r\n       </div>\r\n         \r\n   </div>\r\n   </div>\r\n  \r\n \r\n        {this.state.moviedata.results.map( (movie) => {\r\n          return (\r\n           <div class=\"container\" style={{backgroundImage: \"url(https://image.tmdb.org/t/p/original\" + movie.backdrop_path + \")\"}}><p>\r\n             \r\n            <strong> <h1 className=\"title\">{movie.title}</h1> </strong>\r\n             <h5 className=\"release\">Rating average:{\" \" + movie.vote_average}/10</h5></p>\r\n             <div className=\"rating\">\r\n             <p class=\"page-header\">Rate the movie!</p>\r\n                <div class=\"chart-scale\">\r\n                  <button class=\"btn btn-scale btn-scale-desc-1\">1</button>\r\n                  <button class=\"btn btn-scale btn-scale-desc-2\">2</button>\r\n                  <button class=\"btn btn-scale btn-scale-desc-3\">3</button>\r\n                  <button class=\"btn btn-scale btn-scale-desc-4\">4</button>\r\n                  <button class=\"btn btn-scale btn-scale-desc-5\">5</button>\r\n                  <button class=\"btn btn-scale btn-scale-desc-6\">6</button>\r\n                  <button class=\"btn btn-scale btn-scale-desc-7\">7</button>\r\n                  <button class=\"btn btn-scale btn-scale-desc-8\">8</button>\r\n                  <button class=\"btn btn-scale btn-scale-desc-9\">9</button>\r\n                  <button class=\"btn btn-scale btn-scale-desc-10\">10</button>\r\n                </div>\r\n              </div>\r\n    \r\n             <img src={\"https://image.tmdb.org/t/p/w500\" + movie.poster_path} />\r\n                <div class =\"container2\">\r\n                <div class =\"postertext\">{this.getMovieDetails(movie.id)}</div>\r\n                \r\n                </div>\r\n             <div class=\"text\">{movie.overview}</div>\r\n\r\n             \r\n            </div>\r\n           )\r\n        } )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}